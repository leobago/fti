!-------------------------------------------------------------------------------
! Copyright (c) 2013-2014, Julien Bigot - CEA (julien.bigot@cea.fr)
! All rights reserved.
!
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the "Software"), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
!
! The above copyright notice and this permission notice shall be included in
! all copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
! THE SOFTWARE.
!-------------------------------------------------------------------------------

!$SH source fortran.bpp.sh
!$SH MAXDIM=7

module print_mod

  implicit none

  private

  public:: print_val

  interface print_val
!$SH for T in ${FORTTYPES}; do # T: type descriptor
!$SH   for D in $(seq 0 ${MAXDIM}); do # D: dimensions of array
    module procedure print_${T}_${D}d
!$SH   done
!$SH done
  endinterface print_val

contains
!$SH for T in ${FORTTYPES}; do # T: type descriptor
!$SH   for D in $(seq 0 ${MAXDIM}); do # D: dimensions of array


  subroutine print_${T}_${D}d( val )

    $(fort_type $T):: val$(array_desc $D)

    print '("The value is a $T of dim $D")'
    print '("Its first element is ", $(io_format $T) )', &
            val$(str_repeat 1 1 $D ', ' '(' ')')

  endsubroutine print_${T}_${D}d

!$SH   done
!$SH done
endmodule print_mod

program tst_bpp

  use print_mod

  implicit none

  integer:: ival
  real:: rval
  real:: aval(3,2)
  integer:: ii, jj

  ival = 1

  rval = 1.5

  do ii = 1,3
    do jj=1,2
      aval(ii, jj) = 0.1*ii+0.01*jj
    enddo
  enddo

  print *, "Here are ival, rval and aval:"
  call print_val(ival)
  call print_val(rval)
  call print_val(aval)

endprogram tst_bpp
