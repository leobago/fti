!$SH source fortran.bpp.sh

!$SH # the maximum dimension of array handled here
!$SH MAXDIM=7

!$SH # Returns the FTI type associated to the type descriptor $1
!$SH function fti_type {
!$SH   echo "FTI_${1}"
!$SH }

!> \file interface.F90
!! \brief Fortran interface for the FTI checkpoint library

!> Modul: FTI

module FTI

  use ISO_C_BINDING

  private


  type, public :: FTI_type

    type(c_ptr), private :: raw_type

  endtype FTI_type



  !> Token returned if a FTI function succeeds.
  integer, parameter :: FTI_SCES = 0
  !> Token returned if a FTI function fails.
  integer, parameter :: FTI_NSCS = -1



!$SH for T in ${FORTTYPES}; do
  type(FTI_type) :: $(fti_type ${T})
!$SH done



  public :: FTI_SCES, FTI_NSCS, &
!$SH for T in ${FORTTYPES}; do
      $(fti_type ${T}), &
!$SH done
      FTI_Init, FTI_Status, FTI_InitType, FTI_Protect,  &
      FTI_Checkpoint, FTI_Recover, FTI_Snapshot, FTI_Finalize, &
			FTI_GetStoredSize, FTI_Realloc, FTI_RecoverVar, &
      FTI_AddSimpleField, FTI_AddComplexField, FTI_InitComplexType, &
      FTI_InitICP, FTI_AddVarICP, FTI_FinalizeICP, FTI_setIDFromString, &
      FTI_getIDFromString



  interface

    function FTI_Init_impl(config_file, global_comm) &
            bind(c, name='FTI_Init_fort_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Init_impl
      character(c_char), intent(IN) :: config_file(*)
      integer(c_int), intent(INOUT) :: global_comm

    endfunction FTI_Init_impl

  endinterface

  interface 

    function FTI_setIDFromString_impl(name) &
              bind(c, name='FTI_setIDFromString')

      use ISO_C_BINDING
      integer (c_int) :: FTI_setIDFromString_impl
      character(c_char), intent(IN) :: name(*)

    endfunction FTI_setIDFromString_impl

  endinterface

  interface 

    function FTI_getIDFromString_impl(name) &
              bind(c, name='FTI_getIDFromString')

      use ISO_C_BINDING
      integer (c_int) :: FTI_getIDFromString_impl
      character(c_char), intent(IN) :: name(*)

    endfunction FTI_getIDFromString_impl

  endinterface


  interface

    function FTI_Status_impl() &
            bind(c, name='FTI_Status')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Status_impl

    endfunction FTI_Status_impl

  endinterface



  interface

    function FTI_InitType_impl(type_F, size_F) &
            bind(c, name='FTI_InitType_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_InitType_impl
      type(c_ptr), intent(OUT) :: type_F
      integer(c_int), value :: size_F

    endfunction FTI_InitType_impl

  endinterface

  interface
    function FTI_InitPrimitiveType_impl(type_F, name, size_F) &
            bind(c, name='FTI_InitPrimitiveType_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_InitPrimitiveType_impl
      type(c_ptr), intent(OUT) :: type_F
      character(c_char), intent(IN) :: name(*)
      integer(c_int), value :: size_F

    endfunction FTI_InitPrimitiveType_impl

  endinterface

	interface

		function FTI_GetStoredSize_impl(id_F) &
						bind(c, name='FTI_GetStoredSize')

			use ISO_C_BINDING

			integer(c_long)				:: FTI_GetStoredSize_impl
			integer(c_int), value	:: id_F

		endfunction FTI_GetStoredSize_impl

	endinterface

  interface

    function FTI_Realloc_impl(id_F, ptr) &
            bind(c, name='FTI_Realloc')

      use ISO_C_BINDING

      type(c_ptr)               :: FTI_Realloc_impl
      integer(c_int), value     :: id_F
      type(c_ptr), value        :: ptr

    endfunction FTI_Realloc_impl

  endinterface

  interface

    function FTI_Protect_impl(id_F, ptr, count_F, type_F) &
            bind(c, name='FTI_Protect_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Protect_impl
      integer(c_int), value :: id_F
      type(c_ptr), value :: ptr
      integer(c_long), value :: count_F
      type(c_ptr), value :: type_F

    endfunction FTI_Protect_impl

  endinterface



  interface

    function FTI_Checkpoint_impl(id_F, level) &
            bind(c, name='FTI_Checkpoint')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Checkpoint_impl
      integer(c_int), value :: id_F
      integer(c_int), value :: level

    endfunction FTI_Checkpoint_impl

  endinterface

  interface

    function FTI_InitICP_impl(id_F, level, activate) &
            bind(c, name='FTI_InitICP')

      use ISO_C_BINDING

      integer(c_int) :: FTI_InitICP_impl
      integer(c_int), value :: id_F
      integer(c_int), value :: level
      logical(c_bool), value :: activate

    endfunction FTI_InitICP_impl

  endinterface

  interface

    function FTI_AddVarICP_impl(id_F) &
            bind(c, name='FTI_AddVarICP')

      use ISO_C_BINDING

      integer(c_int) :: FTI_AddVarICP_impl
      integer(c_int), value :: id_F

    endfunction FTI_AddVarICP_impl

  endinterface

  interface

    function FTI_FinalizeICP_impl() &
            bind(c, name='FTI_FinalizeICP')

      use ISO_C_BINDING

      integer(c_int) :: FTI_FinalizeICP_impl

    endfunction FTI_FinalizeICP_impl

  endinterface

  interface

    function FTI_Recover_impl() &
            bind(c, name='FTI_Recover')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Recover_impl

    endfunction FTI_Recover_impl

  endinterface


  interface

    function FTI_RecoverVar_impl(id) &
            bind(c, name='FTI_RecoverVar')

      use ISO_C_BINDING

      integer(c_int) :: FTI_RecoverVar_impl
      integer(c_int), value :: id

    endfunction FTI_RecoverVar_impl

  endinterface


  interface

    function FTI_Snapshot_impl() &
            bind(c, name='FTI_Snapshot')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Snapshot_impl

    endfunction FTI_Snapshot_impl

  endinterface



  interface

    function FTI_Finalize_impl() &
            bind(c, name='FTI_Finalize')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Finalize_impl

    endfunction FTI_Finalize_impl

  endinterface


  interface FTI_Realloc

    module procedure FTI_Realloc_Ptr

  endinterface FTI_Realloc


  interface FTI_Protect

    module procedure FTI_Protect_Ptr
!$SH for T in ${FORTTYPES}; do
!$SH   for D in $(seq 0 ${MAXDIM}); do
    module procedure FTI_Protect_${T}${D}
!$SH   done
!$SH done

  endinterface FTI_Protect

  interface

    function FTI_InitComplexType_impl(type_F, def_F, length, size, name) &
            bind(c, name='FTI_InitComplexType_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_InitComplexType_impl
      type(c_ptr), intent(OUT) :: type_F
      type(c_ptr), intent(IN) :: def_F
      integer(c_int), intent(IN) :: length
      integer(c_long), intent(IN) :: size
      character(c_char), intent(IN) :: name(*)

    endfunction FTI_InitComplexType_impl

  endinterface

  interface

    function FTI_AddSimpleField_impl(def_F, type_F, offset, id, name) &
            bind(c, name='FTI_AddSimpleField')

      use ISO_C_BINDING
      type(c_ptr), intent(INOUT) :: def_F
      type(c_ptr), intent(IN) :: type_F
      integer(c_long), intent(IN) :: offset
      integer(c_int), value :: id
      character(c_char), intent(IN) :: name(*)

    endfunction FTI_AddSimpleField_impl

  endinterface

  interface

    function FTI_AddComplexField_impl(def_F, type_F, offset, rank, dimLength, id, name) &
            bind(c, name='FTI_AddComplexField')

      use ISO_C_BINDING
      type(c_ptr), intent(INOUT) :: def_F
      type(c_ptr), intent(IN) :: type_F
      integer(c_long), intent(IN) :: offset
      integer(c_int), value :: rank
      integer(c_int), intent(IN) :: dimLength(*)
      integer(c_int), value :: id
      character(c_char), intent(IN) :: name(*)

    endfunction FTI_AddComplexField_impl

  endinterface

contains

  !> This function initializes the FTI context and prepares the heads to wait
  !! for checkpoints. FTI processes should never get out of this function. In
  !! case of a restart, checkpoint files should be recovered and in place at the
  !! end of this function.
  !! \brief     Initializes FTI
  !! \param     config_File     (IN)    FTI configuration file.
  !! \param     global_Comm     (INOUT) Main MPI communicator of the application.
  !! \param     err             (OUT)   Token for error handling.
  !! \return    integer         FTI_SCES if successful.
  subroutine FTI_Init(config_file, global_comm, err)

    include 'mpif.h'

    character(len=*), intent(IN) :: config_file
    integer, intent(INOUT) :: global_comm
    integer, intent(OUT) :: err

    character, target, dimension(1:len_trim(config_file)+1) :: config_file_c
    integer :: ii, ll
    integer(c_int) :: global_comm_c

    ll = len_trim(config_file)
    do ii = 1, ll
      config_file_c(ii) = config_file(ii:ii)
    enddo
    config_file_c(ll+1) = c_null_char
    global_comm_c = int(global_comm, c_int)
    err = int(FTI_Init_impl(config_file_c, global_comm_c))
    global_comm = int(global_comm_c)
    if (err /= FTI_SCES ) then
      return
    endif

!$SH for T in ${FORTTYPES}; do
    err = FTI_InitPrimitiveType($(fti_type ${T}), "${T}", int($(fort_sizeof ${T})_C_int/8_c_int, C_int))
    if (err /= FTI_SCES ) then
      return
    endif
!$SH done

  endsubroutine FTI_Init

  !>  This function returns the current status of the recovery flag.
  !!  \brief    It returns the current status of the recovery flag.
  !!  \param    status  (OUT)   status token of the recovery flag.
  !!  \return   integer         FTI_Exec.reco.
  subroutine FTI_Status(status)

    integer, intent(OUT) :: status

    status = int(FTI_Status_impl())

  endsubroutine FTI_Status

  subroutine FTI_setIDFromString(name, id)

    character(len=*), intent(IN)  ::name
    integer, intent(OUT) :: id
    character, target, dimension(1:len_trim(name)+1) :: name_c
    integer :: ii, ll
    ll = len_trim(name)
    do ii = 1, ll
      name_c(ii) = name(ii:ii)
    enddo
    name_c(ll+1) = c_null_char
  
    id = FTI_setIDFromString_impl(name_c)
  end subroutine FTI_setIDFromString

  subroutine FTI_getIDFromString(name, id)

    character(len=*), intent(IN)  ::name
    integer, intent(OUT) :: id
    character, target, dimension(1:len_trim(name)+1) :: name_c
    integer :: ii, ll
    ll = len_trim(name)
    do ii = 1, ll
      name_c(ii) = name(ii:ii)
    enddo
    name_c(ll+1) = c_null_char
  
    id = FTI_getIDFromString_impl(name_c)
  end subroutine FTI_getIDFromString


  !>  This function initalizes a data type. the only information needed is the
  !!  size of the data type, the rest is black box for FTI.
  !!  \brief    It initializes a data type.
  !!  \param    type_F  (IN)    The data type to be intialized.
  !!  \param    size_F  (IN)    The size of the data type to be intialized.
  !!  \param    err     (OUT)   Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_InitType(type_F, size_F, err)

    type(FTI_type), intent(OUT) :: type_F
    integer, intent(IN) :: size_F
    integer, intent(OUT) :: err

    err = int(FTI_InitType_impl(type_F%raw_type, int(size_F, c_int)))

  endsubroutine FTI_InitType

  !>  Try to initialize an FTIT_Type from a Fortran primitive datatype.
  !!  This function tries to map a Fortran primitive with a C primitive.
  !!  If there is not a valid match, this will create a new custom datatype.
  !!  \brief    Initializes a primitive data type in FTI.
  !!  \param    type_F  (OUT)   The data type to be intialized.
  !!  \param    name    (IN)    The Fortran data type mnemonic.
  !!  \param    size_F  (IN)    The size of the data type in bytes.
  !!  \return   integer         FTI_SCES if successful.
  function FTI_InitPrimitiveType(type_F, name, size_F) result(ret)

    type(FTI_type),   intent(OUT)   :: type_F
    character(len=*), intent(IN)    :: name
    integer,          intent(IN)    :: size_F
    integer                         :: ret

    character, target, dimension(1:len_trim(name)+1) :: name_c
    integer :: ii, ll
    ll = len_trim(name)
    do ii = 1, ll
      name_c(ii) = name(ii:ii)
    enddo
    name_c(ll+1) = c_null_char

    ret = int(FTI_InitPrimitiveType_impl(type_F%raw_type, name_c, int(size_F, c_int)))
  endfunction FTI_InitPrimitiveType

  !>  This function returns size of variable of given ID that is saved in metadata.
  !!  This may be different from size of variable that is in the program. If this
  !!  function it's called when recovery it returns size from metadata file, if it's
  !!  called after checkpoint it returns size saved in temporary metadata. If there
  !!  is no size saved in metadata it returns 0.
  !!  \brief    Returns size saved in metadata of variable
  !!  \param    id_F    (IN)    Variable ID.
  !!  \param    size    (OUT)   Size of variable or 0 if size not saved.
  !!  \return   long            Returns size of variable or 0 if size not saved.
  subroutine FTI_GetStoredSize(id_F, size)

  	integer, intent(IN)	:: id_F
  	integer(4)					:: size

  	size = long(FTI_GetStoredSize_impl(int(id_F,c_int)))

  endsubroutine FTI_GetStoredSize

  !>  This function loads the checkpoint data size from the metadata
  !!  file, reallacates memory and updates data size information.
  !!  \brief    Reallocates dataset to last checkpoint size.
  !!  \param    id_F    (IN)    Variable ID.
  !!  \param    ptr     (INOUT) C-Pointer to the variable.
  !!  \param    ierr    (OUT)   Token for error handling.
  !!  \return   pointer         Pointer if successful, NULL otherwise
  subroutine FTI_Realloc_Ptr(id_F, ptr, ierr)

    integer, intent(IN)  :: id_F
    type(c_ptr)          :: ptr
    integer, intent(OUT) :: ierr

    ierr = 0

    ptr = FTI_Realloc_impl(id_F, ptr)
    if (.not. c_associated(ptr)) then
        ierr = -1
    end if

  endsubroutine FTI_Realloc_Ptr

  !>  This function stores a pointer to a data structure, its size, its ID,
  !!  its number of elements and the type of the elements. This list of
  !!  structures is the data that will be stored during a checkpoint and
  !!  loaded during a recovery. It resets the pointer to a data structure,
  !!  its size, its number of elements and the type of the elements if the
  !!  dataset was already previously registered.
  !!  \brief    It sets/resets the pointer and type to a protected variable.
  !!  \param    id_F    (IN)    ID for searches and update.
  !!  \param    ptr     (IN)    C-Pointer to the data structure.
  !!  \param    count_F (IN)    Number of elements in the data structure.
  !!  \param    type_F  (IN)    Type of elements in the data structure.
  !!  \param    err     (OUT)   Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_Protect_Ptr(id_F, ptr, count_F, type_F, err)

    integer, intent(IN) :: id_F
    type(c_ptr), value :: ptr
    integer, intent(IN) :: count_F
    type(FTI_type), intent(IN) :: type_F
    integer, intent(OUT) :: err

    err = int(FTI_Protect_impl(int(id_F, c_int), ptr, int(count_F, c_long), &
            type_F%raw_type))

  endsubroutine FTI_Protect_Ptr
!$SH for T in ${FORTTYPES}; do

  !>  This function stores a pointer to a data structure, its size, its ID,
  !!  its number of elements and the type of the elements. This list of
  !!  structures is the data that will be stored during a checkpoint and
  !!  loaded during a recovery. It resets the pointer to a data structure,
  !!  its size, its number of elements and the type of the elements if the
  !!  dataset was already previously registered.
  !!  \brief    It sets/resets the pointer and type to a protected variable.
  !!  \param    id_F    (IN)    ID for searches and update.
  !!  \param    data    (IN)    data field to protect.
  !!  \param    err     (OUT)   Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_Protect_${T}0(id_F, data, err)

    integer, intent(IN) :: id_F
    $(fort_type ${T}), pointer :: data
    integer, intent(OUT) :: err

    call FTI_Protect_Ptr(id_F, c_loc(data), 1, $(fti_type ${T}), err)

  endsubroutine FTI_Protect_${T}0

!$SH   for D in $(seq 1 ${MAXDIM}); do
  !>  This function stores a pointer to a data structure, its size, its ID,
  !!  its number of elements and the type of the elements. This list of
  !!  structures is the data that will be stored during a checkpoint and
  !!  loaded during a recovery. It resets the pointer to a data structure,
  !!  its size, its number of elements and the type of the elements if the
  !!  dataset was already previously registered.
  !!  \brief    It sets/resets the pointer and type to a protected variable.
  !!  \param    id_F    (IN)    ID for searches and update.
  !!  \param    data    (IN)    data field to protect.
  !!  \param    err     (OUT)   Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_Protect_${T}${D}(id_F, data, err)

    integer, intent(IN) :: id_F
    $(fort_type ${T}), pointer :: data$(str_repeat ':' 1 ${D} ',' '(' ')')
    integer, intent(OUT) :: err

    ! workaround, we take the address of the first array element and hope for
    ! the best since not much better can be done
    call FTI_Protect_Ptr(id_F, &
            c_loc(data$(str_repeat 'lbound(data, @N)' 1 ${D} $',&\n' '(' ')')), &
            size(data), $(fti_type ${T}), err)

  endsubroutine FTI_Protect_${T}${D}

!$SH   done
!$SH done
  !>  This function starts by blocking on a receive if the previous ckpt. was
  !!  offline. Then, it updates the ckpt. information. It writes down the ckpt.
  !!  data, creates the metadata and the post-processing work. This function
  !!  is complementary with the FTI_Listen function in terms of communications.
  !!  \brief    It takes the checkpoint and triggers the post-ckpt. work.
  !!  \param    id_F    (IN)    Checkpoint ID.
  !!  \param    level   (IN)    Checkpoint level.
  !!  \param    err     (INOUT) Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_Checkpoint(id_F, level, err)

    integer, intent(IN) :: id_F
    integer, intent(IN) :: level
    integer, intent(OUT) :: err

    err = int(FTI_Checkpoint_impl(int(id_F, c_int), int(level, c_int)))

  endsubroutine FTI_Checkpoint
  
  subroutine FTI_InitICP(id_F, level, activate, err)

    integer, intent(IN) :: id_F
    integer, intent(IN) :: level
    logical, intent(IN) :: activate
    integer, intent(OUT) :: err

    err = int(FTI_InitICP_impl(int(id_F, c_int), int(level, c_int), logical(activate, c_bool)))

  endsubroutine FTI_InitICP
  
  subroutine FTI_AddVarICP(id_F, err)

    integer, intent(IN) :: id_F
    integer, intent(OUT) :: err

    err = int(FTI_AddVarICP_impl(int(id_F, c_int)))

  endsubroutine FTI_AddVarICP
  
  subroutine FTI_FinalizeICP(err)

    integer, intent(OUT) :: err

    err = int(FTI_FinalizeICP_impl())

  endsubroutine FTI_FinalizeICP

  !>  This function loads the checkpoint data from the checkpoint file and
  !!  it updates some basic checkpoint information.
  !!  \brief    It loads the checkpoint data.
  !!  \param    err     (INOUT) Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_Recover(err)

    integer, intent(OUT) :: err

    err = int(FTI_Recover_impl())

  endsubroutine FTI_Recover

  !>  During a restart process, this function recovers the variable specified
  !!  by the given id. No effect during a regular execution.
  !!  The variable must have already been protected, otherwise, FTI_NSCS is returned.
  !!  Improvements to be done:
  !!  Open checkpoint file at FTI_Init, close it at FTI_Snapshot
  !!  Maintain a variable accumulating the offset as variable are protected during
  !!  the restart to avoid doing the loop to calculate the offset in the
  !!  checkpoint file.
  !!  \brief    During the restart, recovers the given variable
  !!  \param    id      (IN)    ID of variable to recover
  !!  \param    err     (INOUT) Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_RecoverVar(id,err)

    integer, intent(IN) :: id
    integer, intent(OUT) :: err

    err = int(FTI_RecoverVar_impl(id))

  endsubroutine FTI_RecoverVar

  !>  This function loads the checkpoint data from the checkpoint file in case
  !!  of restart. Otherwise, it checks if the current iteration requires
  !!  checkpointing, if it does it checks which checkpoint level, write the
  !!  data in the files and it communicates with the head of the node to inform
  !!  that a checkpoint has been taken. Checkpoint ID and counters are updated.
  !!  \brief    Takes an FTI snapshot or recovers the data if it is a restart.
  !!  \param    err     (INOUT) Token for error handling.
  !!  \return   integer         FTI_SCES if successful.
  subroutine FTI_Snapshot(err)

    integer, intent(OUT) :: err

    err = int(FTI_Snapshot_impl())

  endsubroutine FTI_Snapshot

  !>  This function notifies the FTI processes that the execution is over, frees
  !!  some data structures and it closes. If this function is not called on the
  !!  application processes the FTI processes will never finish (deadlock).
  !!  \brief    It closes FTI properly on the application processes.
  !!  \param    err     (INOUT) Token for error handling.
  !!  \return   integer FTI_SCES if successful.
  subroutine FTI_Finalize(err)

    integer, intent(OUT) :: err

    err = int(FTI_Finalize_impl())

  endsubroutine FTI_Finalize

  !>  This function adds a field to the complex datatype. Use offsetof macro to
  !!  set offset. First ID must be 0, next one must be +1. If name is NULL FTI
  !!  will set "T${id}" name. Sets rank and dimLength to 1.
  !!  \brief    It adds a fileld to a complex data type definition.
  !!  \param    def_F   (IN)    The definition of the data type to add field.
  !!  \param    type_F  (IN)    The data type of the field to add.
  !!  \param    offset  (IN)    Offset of field in a structure.
  !!  \param    id      (IN)    Id of field in a structure.
  !!  \param    name    (IN)    data field name in hdf5 checkpoint file.
  subroutine FTI_AddSimpleField(def_F, type_F, offset, id, name)

    type(FTI_type), intent(INOUT) :: def_F
    type(FTI_type), intent(IN) :: type_F
    integer, intent(IN) :: offset
    integer, intent(IN) :: id
    character(len=*), intent(IN) :: name


    err = int(FTI_AddSimpleField_impl(def_F%raw_type, type_F%raw_type, int(offset, c_long), &
              int(id, c_int), name))

  endsubroutine FTI_AddSimpleField

  !>  This function adds a field to the complex datatype. Use offsetof macro to
  !!  set offset. First ID must be 0, next one must be +1. If name is NULL FTI
  !!  will set "T${id}" name. Sets rank and dimLength to 1.
  !!  \brief    It adds a fileld to a complex data type definition.
  !!  \brief    It adds a fileld to a complex data type definition.
  !!  \param    def_F     (IN)    The definition of the data type to add field.
  !!  \param    type_F    (IN)    The data type of the field to add.
  !!  \param    offset    (IN)    Offset of field in a structure.
  !!  \param    rank      (IN)    Rank of the array.
  !!  \param    dimLength (IN)    Dimention length for each dimention.
  !!  \param    id        (IN)    Id of a field in a structure.
  !!  \param    name      (IN)    data field name in hdf5 checkpoint file.
  subroutine FTI_AddComplexField(def_F, type_F, offset, rank, dimLength, id, name)

    type(FTI_type), intent(INOUT) :: def_F
    type(FTI_type), intent(IN) :: type_F
    integer, intent(IN) :: offset
    integer, intent(IN) :: rank
    integer, intent(IN) :: dimLength(*)
    integer, intent(IN) :: id
    character(len=*), intent(IN) :: name


    err = int(FTI_AddComplexField_impl(def_F%raw_type, type_F%raw_type, int(offset, c_long), &
              int(rank, c_int), dimLength, int(id, c_int), name))

  endsubroutine FTI_AddComplexField

!>  This function initalizes a data type. the only information needed is the
!!  size of the data type, the rest is black box for FTI.
!!  \brief    It initializes a data type.
!!  \param    type_F  (IN)    The data type to be intialized.
!!  \param    def_F   (IN)    The definition of the data type to be intialized.
!!  \param    length  (IN)    Number of fields in the data structure.
!!  \param    size    (IN)    Size of the sturcture.
!!  \param    name    (IN)    data field name in hdf5 checkpoint file.
!!  \param    err     (OUT)   Token for error handling.
!!  \return   integer         FTI_SCES if successful.
subroutine FTI_InitComplexType(type_F, def_F, length, size, name, err)

  type(FTI_type), intent(OUT) :: type_F
  type(FTI_type), intent(IN) :: def_F
  integer, intent(IN) :: length
  integer, intent(IN) :: size
  character(len=*), intent(IN) :: name
  integer, intent(OUT) :: err

  err = int(FTI_InitComplexType_impl(type_F%raw_type, def_F%raw_type, int(length, c_int), &
            int(size, c_long), name))

endsubroutine FTI_InitComplexType

endmodule FTI
