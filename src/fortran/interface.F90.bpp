!$SH source fortran.bpp.sh

!$SH # the maximum dimension of array handled here
!$SH MAXDIM=7

!$SH # Returns the FTI type associated to the type descriptor $1
!$SH function fti_type {
!$SH   echo "FTI_${1}"
!$SH }

!> \file interface.F90
!! \brief Fortran interface for the FTI checkpoint library

!> Modul: FTI

module FTI

  use ISO_C_BINDING

  private


  type, public :: FTI_type
    
    type(c_ptr), private :: raw_type

  endtype FTI_type



  !> Token returned if a FTI function succeeds.
  integer, parameter :: FTI_SCES = 0
  !> Token returned if a FTI function fails.
  integer, parameter :: FTI_NSCS = -1



!$SH for T in ${FORTTYPES}; do
  type(FTI_type) :: $(fti_type ${T})
!$SH done



  public :: FTI_SCES, FTI_NSCS, &
!$SH for T in ${FORTTYPES}; do
      $(fti_type ${T}), &
!$SH done
      FTI_Init, FTI_Status, FTI_InitType, FTI_Protect,  &
      FTI_Checkpoint, FTI_Recover, FTI_Snapshot, FTI_Finalize, &
			FTI_GetStoredSize, FTI_Realloc, FTI_Recover_variable



  interface

    function FTI_Init_impl(config_file, global_comm) &
            bind(c, name='FTI_Init_fort_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Init_impl
      character(c_char), intent(IN) :: config_file(*)
      integer(c_int), intent(INOUT) :: global_comm

    endfunction FTI_Init_impl

  endinterface



  interface

    function FTI_Status_impl() &
            bind(c, name='FTI_Status')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Status_impl

    endfunction FTI_Status_impl

  endinterface



  interface

    function FTI_InitType_impl(type_F, size_F) &
            bind(c, name='FTI_InitType_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_InitType_impl
      type(c_ptr), intent(OUT) :: type_F
      integer(c_int), value :: size_F

    endfunction FTI_InitType_impl

  endinterface

	interface
		
		function FTI_GetStoredSize_impl(id_F) &
						bind(c, name='FTI_GetStoredSize')
			
			use ISO_C_BINDING

			integer(c_long)				:: FTI_GetStoredSize_impl
			integer(c_int), value	:: id_F

		endfunction FTI_GetStoredSize_impl
	
	endinterface

  interface

    function FTI_Realloc_impl(id_F, ptr) &
            bind(c, name='FTI_Realloc')

      use ISO_C_BINDING

      type(c_ptr)               :: FTI_Realloc_impl
      integer(c_int), value     :: id_F
      type(c_ptr), value        :: ptr

    endfunction FTI_Realloc_impl

  endinterface

  interface

    function FTI_Protect_impl(id_F, ptr, count_F, type_F) &
            bind(c, name='FTI_Protect_wrapper')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Protect_impl
      integer(c_int), value :: id_F
      type(c_ptr), value :: ptr
      integer(c_long), value :: count_F
      type(c_ptr), value :: type_F

    endfunction FTI_Protect_impl

  endinterface



  interface

    function FTI_Checkpoint_impl(id_F, level) &
            bind(c, name='FTI_Checkpoint')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Checkpoint_impl
      integer(c_int), value :: id_F
      integer(c_int), value :: level

    endfunction FTI_Checkpoint_impl

  endinterface



  interface

    function FTI_Recover_impl() &
            bind(c, name='FTI_Recover')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Recover_impl

    endfunction FTI_Recover_impl

  endinterface


  interface

    function FTI_Recover_variable_impl(id) &
            bind(c, name='FTI_Recover_variable')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Recover_variable_impl
      integer(c_int), value :: id

    endfunction FTI_Recover_variable_impl

  endinterface
  

  interface

    function FTI_Snapshot_impl() &
            bind(c, name='FTI_Snapshot')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Snapshot_impl

    endfunction FTI_Snapshot_impl

  endinterface



  interface

    function FTI_Finalize_impl() &
            bind(c, name='FTI_Finalize')

      use ISO_C_BINDING

      integer(c_int) :: FTI_Finalize_impl

    endfunction FTI_Finalize_impl

  endinterface


  interface FTI_Realloc

    module procedure FTI_Realloc_Ptr

  endinterface FTI_Realloc


  interface FTI_Protect

    module procedure FTI_Protect_Ptr
!$SH for T in ${FORTTYPES}; do
!$SH   for D in $(seq 0 ${MAXDIM}); do
    module procedure FTI_Protect_${T}${D}
!$SH   done
!$SH done

  endinterface FTI_Protect


contains
  
  !> This function initializes the FTI context and prepares the heads to wait
  !> for checkpoints. FTI processes should never get out of this function. In
  !> case of a restart, checkpoint files should be recovered and in place at the
  !> end of this function.
  
  !> \brief Initializes FTI
  !> \param      config_File      FTI configuration file.
  !> \param      global_Comm      Main MPI communicator of the application.
  !> \param      err              Token for error handling.
  !> \return     integer          FTI_SCES if successful.
  
  subroutine FTI_Init(config_file, global_comm, err)

    include 'mpif.h'

    character(len=*), intent(IN) :: config_file
    integer, intent(INOUT) :: global_comm
    integer, intent(OUT) :: err

    character, target, dimension(1:len_trim(config_file)+1) :: config_file_c
    integer :: ii, ll
    integer(c_int) :: global_comm_c

    ll = len_trim(config_file)
    do ii = 1, ll
      config_file_c(ii) = config_file(ii:ii)
    enddo
    config_file_c(ll+1) = c_null_char
    global_comm_c = int(global_comm, c_int)
    err = int(FTI_Init_impl(config_file_c, global_comm_c))
    global_comm = int(global_comm_c)
    if (err /= FTI_SCES ) then
      return
    endif

!$SH for T in ${FORTTYPES}; do
    call FTI_InitType($(fti_type ${T}), int($(fort_sizeof ${T})_C_int/8_c_int, C_int), err)
    if (err /= FTI_SCES ) then
      return
    endif
!$SH done

  endsubroutine FTI_Init



  subroutine FTI_Status(status)

    integer, intent(OUT) :: status

    status = int(FTI_Status_impl())

  endsubroutine FTI_Status



  subroutine FTI_InitType(type_F, size_F, err)

    type(FTI_type), intent(OUT) :: type_F
    integer, intent(IN) :: size_F
    integer, intent(OUT) :: err

    err = int(FTI_InitType_impl(type_F%raw_type, int(size_F, c_int)))

  endsubroutine FTI_InitType

	subroutine FTI_GetStoredSize(id_F, size)
		
		integer, intent(IN)	:: id_F
		integer(4)					:: size

		size = long(FTI_GetStoredSize_impl(int(id_F,c_int)))
	
	endsubroutine FTI_GetStoredSize

  subroutine FTI_Realloc_Ptr(id_F, ptr, ierr)

    integer, intent(IN)  :: id_F
    type(c_ptr)          :: ptr
    integer, intent(OUT) :: ierr

    ierr = 0
    
    ptr = FTI_Realloc_impl(id_F, ptr)
    if (.not. c_associated(ptr)) then
        ierr = -1
    end if

  endsubroutine FTI_Realloc_Ptr

  subroutine FTI_Protect_Ptr(id_F, ptr, count_F, type_F, err)

    integer, intent(IN) :: id_F
    type(c_ptr), value :: ptr
    integer, intent(IN) :: count_F
    type(FTI_type), intent(IN) :: type_F
    integer, intent(OUT) :: err

    err = int(FTI_Protect_impl(int(id_F, c_int), ptr, int(count_F, c_long), &
            type_F%raw_type))

  endsubroutine FTI_Protect_Ptr


!$SH for T in ${FORTTYPES}; do

  subroutine FTI_Protect_${T}0(id_F, data, err)

    integer, intent(IN) :: id_F
    $(fort_type ${T}), pointer :: data
    integer, intent(OUT) :: err

    call FTI_Protect_Ptr(id_F, c_loc(data), 1, $(fti_type ${T}), err)

  endsubroutine FTI_Protect_${T}0


!$SH   for D in $(seq 1 ${MAXDIM}); do

  subroutine FTI_Protect_${T}${D}(id_F, data, err)

    integer, intent(IN) :: id_F
    $(fort_type ${T}), pointer :: data$(str_repeat ':' 1 ${D} ',' '(' ')')
    integer, intent(OUT) :: err

    ! workaround, we take the address of the first array element and hope for
    ! the best since not much better can be done
    call FTI_Protect_Ptr(id_F, &
            c_loc(data$(str_repeat 'lbound(data, @N)' 1 ${D} $',&\n' '(' ')')), &
            size(data), $(fti_type ${T}), err)

  endsubroutine FTI_Protect_${T}${D}


!$SH   done
!$SH done

  subroutine FTI_Checkpoint(id_F, level, err)

    integer, intent(IN) :: id_F
    integer, intent(IN) :: level
    integer, intent(OUT) :: err

    err = int(FTI_Checkpoint_impl(int(id_F, c_int), int(level, c_int)))

  endsubroutine FTI_Checkpoint



  subroutine FTI_Recover(err)

    integer, intent(OUT) :: err

    err = int(FTI_Recover_impl())

  endsubroutine FTI_Recover



  subroutine FTI_Recover_variable(id,err)

    integer, intent(IN) :: id
    integer, intent(OUT) :: err

    err = int(FTI_Recover_variable_impl(id))

  endsubroutine FTI_Recover_variable



  subroutine FTI_Snapshot(err)

    integer, intent(OUT) :: err

    err = int(FTI_Snapshot_impl())

  endsubroutine FTI_Snapshot



  subroutine FTI_Finalize(err)

    integer, intent(OUT) :: err

    err = int(FTI_Finalize_impl())

  endsubroutine FTI_Finalize

endmodule FTI
